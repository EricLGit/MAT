GA 
% 设置遗传算法的参数，测试效果
% 设置遗传算法的参数，测试效果
% 设定求解精度为小数点后4位

function GA_main()
elitism = true;             % 选择精英操作
population_size = 100;      % 种群大小
chromosome_size = 17;       % 染色体长度
generation_size = 200;      % 最大迭代次数
cross_rate = 0.6;           % 交叉概率
mutate_rate = 0.01;         % 变异概率

[best_individual,best_fitness,iterations,x] = genetic_algorithm(population_size, chromosome_size, generation_size, cross_rate, mutate_rate, elitism);
disp 最优个体:
best_individual
disp 最优适应度:
best_fitness
disp 最优个体对应自变量值:
x
disp 达到最优结果的迭代次数:
iterations
clear;

% 单点交叉操作
% population_size ：     种群大小
% chromosome_size ：     染色体长度
% cross_rate ：          交叉概率

function GA_crossover(population_size,chromosome_size,cross_rate )
global population 

% 步长为2 遍历种群
for i=1:2:population_size
    % rand< 交叉概率，对两个个体的染色体串进行交叉操作
    if  (rand<cross_rate)
        cross_position = round(rand*chromosome_size);
        if (cross_position ==0 || cross_position ==1)
            continue;
        end
        % 对cross_position 及之后的二进制串进行交换
        for j=cross_position:chromosome_size
            temp=population(i,j);
            population(i,j) = population(i+1,j);
            population(i+1,j)=temp;
        end
    end
end
clear i;
clear j;
clear temp ;
clear cross_position;

% 计算种群个体适应度，对不同的优化目标，修改下面的函数
% population_size : 种群大小
% chromosome_size : 染色体长度

function GA_fitness(population_size,chromosome_size)
global fitness_value;
global population;

upper_bound=9;   %自变量的区间上限
lower_bound=0;   %自变量的区间下限

% 所有种群个体适应度初始化为0
population_size = 100;  
for i=1:population_size
    fitness_value(i)=0;
end

% f(x) = -x-10*sin(5*x)-7*cos(4*x);
for i=1:popultion_size
    for j=1:chromosome_size
        if population(i,j)==1
            fitness_value(i)= fitness_value(i) +2^(j-1); %population[i] 染色体串和实际的自变量xi二进制串顺序是相反的
        end
    end
    fitness_value(i)=lower_bound + fitness_value(i)*(upper_bound-lower_bound)/(2^chromosome_size-1);   %自变量xi二进制转十进制
    fitness_value(i)=fitness_value(i)+10*sin(5*fitness_value(i))+7*cos(4*fitness_value(i));
end

clear i;
clear j;

% 对个体按适应度大小进行排序，并且保存最佳个体
% population_size: 种群大小
% chromosome_size: 染色体长度

function GA_rank(population_size, chromosome_size)
global fitness_value;   % 种群适应度
global fitness_sum;     % 种群累计适应度
global fitness_average;
global best_fitness;
global best_individual;
global best_generation;
global population;
global G;

for i=1:population_size    
    fitness_sum(i) = 0.;
end

min_index = 1;
temp = 1;
temp_chromosome(chromosome_size)=0;

% 遍历种群 
% 冒泡排序
% 最后population(i)的适应度随i递增而递增，population(1)最小，population(population_size)最大
for i=1:population_size
    min_index = i;
    for j = i+1:population_size
        if fitness_value(j) < fitness_value(min_index);
            min_index = j;
        end
    end
    
    if min_index ~= i
        % 交换 fitness_value(i) 和 fitness_value(min_index) 的值
        temp = fitness_value(i);
        fitness_value(i) = fitness_value(min_index);
        fitness_value(min_index) = temp;
        % 此时 fitness_value(i) 的适应度在[i,population_size]上最小
        
        % 交换 population(i) 和 population(min_index) 的染色体串
        for k = 1:chromosome_size
            temp_chromosome(k) = population(i,k);
            population(i,k) = population(min_index,k);
            population(min_index,k) = temp_chromosome(k);
        end
    end
end

% fitness_sum(i) = 前i个个体的适应度之和
for i=1:population_size
    if i==1
        fitness_sum(i) = fitness_sum(i) + fitness_value(i);    
    else
        fitness_sum(i) = fitness_sum(i-1) + fitness_value(i);
    end
end

% fitness_average(G) = 第G次迭代 个体的平均适应度
fitness_average(G) = fitness_sum(population_size)/population_size;

% 更新最大适应度和对应的迭代次数，保存最佳个体(最佳个体的适应度最大)
if fitness_value(population_size) > best_fitness
    best_fitness = fitness_value(population_size);
    best_generation = G;
    for j=1:chromosome_size
        best_individual(j) = population(population_size,j);
    end
end


clear i;
clear j;
clear k;
clear min_index;
clear temp;
clear temp1;

% 轮盘赌选择操作
% population_size: 种群大小
% chromosome_size: 染色体长度
% elitism: 是否精英选择

function GA_selection(population_size, chromosome_size, elitism)
global population;      % 前代种群
global population_new;  % 新一代种群
global fitness_sum;   % 种群积累适应度

for i=1:population_size
    r = rand * fitness_sum(population_size);  % 生成一个随机数，在[0,总适应度]之间
    first = 1;
    last = population_size;
    mid = round((last+first)/2);
    idx = -1;
    
    % 排中法选择个体
    while (first <= last) && (idx == -1) 
        if r > fitness_sum(mid)
            first = mid;
        elseif r < fitness_sum(mid)
            last = mid;     
        else
            idx = mid;
            break;
        end
        mid = round((last+first)/2);
        if (last - first) == 1
            idx = last;
            break;
        end
    end
   
   % 产生新一代个体
   for j=1:chromosome_size
        population_new(i,j) = population(idx,j);
   end
end

% 是否精英选择
if elitism
    p = population_size-1;
else
    p = population_size;
end

for i=1:p
   for j=1:chromosome_size
       % 如果精英选择，将population中前population_size-1个个体更新，最后一个最优个体保留
       population(i,j) = population_new(i,j);
   end
end

clear i;
clear j;
clear population_new;
clear first;
clear last;
clear idx;
clear mid;
 
% MATLAB的GA工具只求函数的(近似)最小值，需要将目标函数取反
function [ y ] = GA_target(x)
y = -x-10*sin(5*x)-7*cos(4*x);
end

% Genetic Algorithm for Functional Maximum Problem
% f(x) = x+10*sin(5*x)+7*cos(4*x), x∈[0,9]

% population_size: 输入种群大小
% chromosome_size: 输入染色体长度
% generation_size: 输入迭代次数
% cross_rate: 输入交叉概率
% mutate_rate: 输入变异概率
% elitism: 输入是否精英选择
% m: 输出最佳个体
% n: 输出最佳适应度
% p: 输出最佳个体出现迭代次数
% q: 输出最佳个体自变量值
function [m,n,p,q] = genetic_algorithm(population_size, chromosome_size, generation_size, cross_rate, mutate_rate, elitism)

global G ;              % 当前迭代次数
global fitness_value;   % 当前代适应度矩阵
global best_fitness;    % 历代最佳适应值
global fitness_average; % 历代平均适应值矩阵
global best_individual; % 历代最佳个体
global best_generation; % 最佳个体出现代
upper_bound = 9;        % 自变量的区间上限
lower_bound = 0;        % 自变量的区间下限
population_size = 100;  

fitness_average = zeros(generation_size,1); % 将 generation_size*1 的零矩阵赋给 fitness_average

disp [ genetic algorithm]

fitness_value(population_size) = 0.;
best_fitness = 0.;
best_generation = 0;

init(population_size, chromosome_size); % 初始化

for G=1:generation_size   
    GA_fitness(population_size, chromosome_size);              % 计算适应度 
    rank(population_size, chromosome_size);                 % 对个体按适应度大小进行排序
    selection(population_size, chromosome_size, elitism);   % 选择操作
    crossover(population_size, chromosome_size, cross_rate);% 交叉操作
    mutation(population_size, chromosome_size, mutate_rate);% 变异操作
end

plotGA(generation_size);% 打印算法迭代过程

m = best_individual;    % 获得最佳个体
n = best_fitness;       % 获得最佳适应度
p = best_generation;    % 获得最佳个体出现时的迭代次数

% 获得最佳个体变量值，对不同的优化目标，这里需要修改
q = 0.;
for j=1:chromosome_size
    if best_individual(j) == 1
            q = q+2^(j-1);  % 最佳个体变量二进制转十进制
    end 
end
q = lower_bound + q*(upper_bound-lower_bound)/(2^chromosome_size-1); % 解码

clear i;
clear j;


% 初始化种群
% population_size: 种群大小
% chromosome_size: 染色体长度

function init(population_size, chromosome_size)
global population;
for i=1:population_size
    for j=1:chromosome_size
        % 给population的i行j列赋值
        population(i,j) = round(rand);  % rand产生(0,1)之间的随机数，round()是四舍五入函数
    end
end
clear i;
clear j;

% 单点变异操作
% population_size: 种群大小
% chromosome_size: 染色体长度
% mutate_rate: 变异概率

function mutation(population_size, chromosome_size, mutate_rate)
global population;

for i=1:population_size
    if rand < mutate_rate
        mutate_position = round(rand*chromosome_size);  % 变异位置
        if mutate_position == 0
            % 若变异位置为0，不变异
            continue;
        end
        population(i,mutate_position) = 1 - population(i, mutate_position);
    end
end

clear i;
clear mutate_position;

% 打印算法迭代过程
% generation_size: 迭代次数

function plotGA(generation_size)
global fitness_average;
x = 1:1:generation_size;
y = fitness_average;
plot(x,y)
